# stop_detection/movingpandas_stop_detection.py
import pandas as pd
import geopandas as gpd
from shapely.geometry import Point
import movingpandas as mpd
from datetime import timedelta

def detect_stops_with_movingpandas(df, min_duration_minutes=1, max_diameter_meters=30):
    """
    D√©tecte les stops avec MovingPandas √† partir d'un DataFrame contenant 'lat', 'lon', 'timestamp'.
    
    Args:
        df (pd.DataFrame): Donn√©es GPS avec colonnes 'lat', 'lon', 'timestamp'
        min_duration_minutes (int): Dur√©e minimale d'un arr√™t (en minutes)
        max_diameter_meters (float): Diam√®tre maximal de la zone de stop (en m√®tres)

    Returns:
        pd.DataFrame: Liste des stops d√©tect√©s avec lat/lon, temps de d√©but/fin, dur√©e
    """
    print(f"‚û°Ô∏è  Points d'entr√©e : {len(df)}")  # Affiche le nombre total de points GPS en entr√©e
    print(f"‚û°Ô∏è  Timestamps min/max : {df['timestamp'].min()} / {df['timestamp'].max()}")  # Affiche les bornes temporelles du dataset

    # Conversion en GeoDataFrame avec g√©om√©trie
    df['geometry'] = df.apply(lambda row: Point(row['lon'], row['lat']), axis=1)  # Cr√©e une g√©om√©trie Point pour chaque ligne √† partir de lon/lat
    gdf = gpd.GeoDataFrame(df, geometry='geometry', crs='EPSG:4326')  # Convertit le DataFrame en GeoDataFrame avec syst√®me de coordonn√©es WGS84

    # Cr√©er une trajectoire
    trajectory = mpd.Trajectory(gdf, traj_id=1, t='timestamp')  # Cr√©e une trajectoire MovingPandas avec un identifiant et les timestamps

    # D√©tecter les stops
    detector = mpd.TrajectoryStopDetector(trajectory)  # Instancie un d√©tecteur d'arr√™ts pour cette trajectoire
    stop_points = detector.get_stop_points(
        min_duration=timedelta(minutes=min_duration_minutes),  # Dur√©e minimale de stop
        max_diameter=max_diameter_meters  # Diam√®tre spatial maximal pour consid√©rer un arr√™t
    )

    print(f"‚û°Ô∏è  {len(stop_points)} stops bruts d√©tect√©s par MovingPandas")  # Affiche le nombre d‚Äôarr√™ts trouv√©s
    print("üß™ Colonnes retourn√©es :", stop_points.columns.tolist())  # Affiche les noms des colonnes du r√©sultat

    # Identifier dynamiquement les colonnes de d√©but et fin
    if stop_points.empty:
        return pd.DataFrame(columns=['start_time', 'end_time', 'duration_s', 'lat', 'lon'])  # Retourne un DataFrame vide avec les bonnes colonnes si aucun stop n‚Äôest trouv√©

    start_col = 't0' if 't0' in stop_points else 'start_time'  # Choix dynamique du nom de la colonne de d√©but selon la version de MovingPandas
    end_col = 't1' if 't1' in stop_points else 'end_time'  # Idem pour la colonne de fin

    # Calcul dur√©e + nettoyage
    stop_points['duration_s'] = (stop_points[end_col] - stop_points[start_col]).dt.total_seconds()  # Calcule la dur√©e du stop en secondes
    stop_points = stop_points.rename(columns={
        start_col: 'start_time',  # Renomme la colonne de d√©but
        end_col: 'end_time',      # Renomme la colonne de fin
        'geometry': 'stop_geom'   # Renomme la g√©om√©trie pour √©viter conflit futur
    })

    stop_points['lat'] = stop_points['stop_geom'].y  # Extrait la latitude √† partir de la g√©om√©trie
    stop_points['lon'] = stop_points['stop_geom'].x  # Extrait la longitude √† partir de la g√©om√©trie

    print("\nüõë Aper√ßu des stops d√©tect√©s :")  # Affiche un aper√ßu des r√©sultats
    print(stop_points[['start_time', 'end_time', 'duration_s', 'lat', 'lon']].head())

    return stop_points[['start_time', 'end_time', 'duration_s', 'lat', 'lon']]  # Retourne le DataFrame avec les colonnes utiles